# CLINERULES

This file provides guidance to Cline when working with code in this repository.

## Common Development Commands

### Setup and Installation
```bash
# Install all dependencies
npm install

# Install with Bun (alternative)
bun config/update.js -b -l -g
```

### Backend Development
```bash
# Run backend in development mode
npm run backend:dev

# Run backend with Bun (faster)
npm run b:api:dev

# Stop the backend service
npm run backend:stop
```

### Frontend Development
```bash
# Run frontend dev server
npm run frontend:dev

# Run frontend with Bun (faster)
npm run b:client:dev
```

### Build Commands
```bash
# Build data provider (required before building client)
npm run build:data-provider

# Build data schemas
npm run build:data-schemas

# Build API
npm run build:api

# Build client package
npm run build:client-package

# Build entire frontend
npm run frontend

# Build backend and frontend (production)
npm run backend
npm run frontend
```

### Testing
```bash
# Run client tests
npm run test:client

# Run API tests
npm run test:api

# Run E2E tests
npm run e2e

# Run E2E tests with browser visible
npm run e2e:headed

# Run E2E tests with debugging
npm run e2e:debug

# Run accessibility tests
npm run e2e:a11y
```

### Code Quality
```bash
# Run linting
npm run lint

# Fix linting issues
npm run lint:fix

# Format code
npm run format
```

### User Management
```bash
# Create a new user
npm run create-user

# Invite a new user
npm run invite-user

# List all users
npm run list-users

# Reset user password
npm run reset-password

# Ban a user
npm run ban-user

# Delete a user
npm run delete-user
```

### Balance Management
```bash
# Add balance to a user
npm run add-balance

# Set balance for a user
npm run set-balance

# List all user balances
npm run list-balances

# View user statistics
npm run user-stats
```

## High-Level Architecture

LibreChat is a full-stack JavaScript/TypeScript application with a monorepo structure:

### Backend (API)
- **Framework**: Express.js
- **Database**: MongoDB via Mongoose
- **Authentication**: Passport.js with JWT, local, LDAP, and OAuth strategies
- **Key Components**:
  - **Server**: Main Express app initialization (`api/server/index.js`)
  - **Routes**: API endpoints (`api/server/routes/`)
  - **Controllers**: Business logic handling API requests (`api/server/controllers/`)
  - **Services**: Core functionality implementations (`api/server/services/`)
  - **Models**: MongoDB schemas and database operations (`api/models/`)
  - **Clients**: Integration with AI providers (`api/app/clients/`)
    - OpenAI, Anthropic, Google, etc.
  - **Middleware**: Request processing, auth, validation (`api/server/middleware/`)

### Frontend (Client)
- **Framework**: React with React Router
- **State Management**: 
  - Recoil for global state
  - React Query for API data fetching/caching
  - Jotai for atomic state
- **UI**: Tailwind CSS with various component libraries
- **Key Components**:
  - **Routes**: Page structure and navigation (`client/src/routes/`)
  - **Components**: Reusable UI components (`client/src/components/`)
  - **Hooks**: Custom React hooks (`client/src/hooks/`)
  - **Store**: State management (`client/src/store/`)
  - **Providers**: Context providers (`client/src/Providers/`)
  - **Utils**: Helper functions (`client/src/utils/`)

### Shared Packages
- **data-provider**: Common data structures shared between frontend/backend
- **api**: API utilities and shared code
- **data-schemas**: Database schema definitions

### Key Features Architecture
1. **AI Model Integration**:
   - Multiple AI providers (OpenAI, Claude, Google, etc.)
   - Custom endpoints for self-hosted models
   - Streaming responses

2. **Chat Functionality**:
   - Real-time message processing
   - Server-Sent Events (SSE) for streaming
   - Conversation management and persistence

3. **Agents & Tools**:
   - LibreChat Agents system
   - Model Context Protocol (MCP) support
   - Code interpreter with sandboxed execution

4. **File Handling**:
   - Multiple storage strategies (local, Firebase, Azure, S3)
   - Image generation and processing
   - File uploads and downloads

5. **Authentication & Authorization**:
   - Multiple auth strategies
   - Role-based access control
   - Social login integrations

### Data Flow
1. Client sends requests to Express API
2. API processes requests through middleware
3. Controllers handle business logic
4. Services interact with models and external APIs
5. MongoDB stores persistent data
6. Responses stream back to client using SSE

## Working with the Codebase

### Important Config Files
- Root directory `.env` - Main environment configuration
- `librechat.example.yaml` - Configuration template for customization

### Key Architecture Patterns
- Service-oriented backend architecture
- Component-based frontend with custom hooks
- Context providers for state management
- Middleware chains for request processing
- Mongoose models for database operations

### Testing Approach
- Jest for unit tests
- Playwright for E2E testing

### Project Structure
```
/api              - Backend code
  /app            - Core application logic
  /config         - Configuration
  /db             - Database connection
  /models         - Mongoose models
  /server         - Express server
    /controllers  - API controllers
    /middleware   - Express middleware
    /routes       - API routes
    /services     - Business logic
/client           - Frontend code
  /src            - React application
    /components   - UI components
    /hooks        - Custom React hooks
    /routes       - React Router routes
    /store        - State management
    /utils        - Helper functions
/packages         - Shared packages
  /data-provider  - Shared data structures
  /api            - API utilities
  /data-schemas   - Database schemas
```

## Documentation Guidelines

- The `docs` subdirectory is where all specs are
- Always follow the branding guide in the `docs/prometheus` directory for styling and branding
