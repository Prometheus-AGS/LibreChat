/**
 * Chart and Data Visualization Examples for LibreChat Artifacts
 *
 * This file contains comprehensive examples showcasing the enhanced chart components
 * with Recharts integration, interactive features, and responsive design.
 */

export const chartExamples = {
  // Basic Line Chart Example
  basicLineChart: {
    name: 'Basic Line Chart',
    description: 'Simple line chart with responsive design and tooltips',
    code: "import React from 'react';\nimport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n} from './ui/chart';\nimport { LineChart, Line, XAxis, YAxis, ResponsiveContainer } from 'recharts';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\n\nconst data = [\n  { month: 'Jan', revenue: 4000, expenses: 2400 },\n  { month: 'Feb', revenue: 3000, expenses: 1398 },\n  { month: 'Mar', revenue: 2000, expenses: 9800 },\n  { month: 'Apr', revenue: 2780, expenses: 3908 },\n  { month: 'May', revenue: 1890, expenses: 4800 },\n  { month: 'Jun', revenue: 2390, expenses: 3800 },\n  { month: 'Jul', revenue: 3490, expenses: 4300 },\n];\n\nconst chartConfig = {\n  revenue: {\n    label: 'Revenue',\n    color: 'hsl(var(--chart-1))',\n  },\n  expenses: {\n    label: 'Expenses',\n    color: 'hsl(var(--chart-2))',\n  },\n};\n\nexport default function BasicLineChart() {\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-2xl font-bold mb-6\">Basic Line Chart</h1>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Revenue vs Expenses</CardTitle>\n            <CardDescription>\n              Monthly comparison of revenue and expenses over time\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ChartContainer config={chartConfig} className=\"h-[400px] w-full\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={data}>\n                  <XAxis \n                    dataKey=\"month\" \n                    tickLine={false}\n                    axisLine={false}\n                    className=\"text-xs\"\n                  />\n                  <YAxis \n                    tickLine={false}\n                    axisLine={false}\n                    className=\"text-xs\"\n                  />\n                  <ChartTooltip content={<ChartTooltipContent />} />\n                  <ChartLegend content={<ChartLegendContent />} />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke={chartConfig.revenue.color}\n                    strokeWidth={2}\n                    dot={{ r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"expenses\" \n                    stroke={chartConfig.expenses.color}\n                    strokeWidth={2}\n                    dot={{ r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </ChartContainer>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}",
  },

  // Interactive Bar Chart Example
  interactiveBarChart: {
    name: 'Interactive Bar Chart',
    description: 'Bar chart with interactive features, filtering, and animations',
    code: "import React from 'react';\nimport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n} from './ui/chart';\nimport { BarChart, Bar, XAxis, YAxis, ResponsiveContainer, Cell } from 'recharts';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\n\nconst salesData = [\n  { product: 'Laptops', sales: 4000, target: 3500, category: 'Electronics' },\n  { product: 'Phones', sales: 3000, target: 3200, category: 'Electronics' },\n  { product: 'Tablets', sales: 2000, target: 2500, category: 'Electronics' },\n  { product: 'Headphones', sales: 2780, target: 2000, category: 'Accessories' },\n  { product: 'Keyboards', sales: 1890, target: 1500, category: 'Accessories' },\n  { product: 'Mice', sales: 2390, target: 2000, category: 'Accessories' },\n  { product: 'Monitors', sales: 3490, target: 3000, category: 'Electronics' },\n];\n\nconst chartConfig = {\n  sales: {\n    label: 'Sales',\n    color: 'hsl(var(--chart-1))',\n  },\n  target: {\n    label: 'Target',\n    color: 'hsl(var(--chart-2))',\n  },\n};\n\nexport default function InteractiveBarChart() {\n  const [selectedCategory, setSelectedCategory] = React.useState<string | null>(null);\n  const [hoveredBar, setHoveredBar] = React.useState<string | null>(null);\n\n  const categories = Array.from(new Set(salesData.map(item => item.category)));\n  \n  const filteredData = selectedCategory \n    ? salesData.filter(item => item.category === selectedCategory)\n    : salesData;\n\n  const getBarColor = (product: string, dataKey: string) => {\n    if (hoveredBar && hoveredBar !== product) {\n      return dataKey === 'sales' ? 'hsl(var(--chart-1) / 0.3)' : 'hsl(var(--chart-2) / 0.3)';\n    }\n    return dataKey === 'sales' ? chartConfig.sales.color : chartConfig.target.color;\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-2xl font-bold mb-6\">Interactive Bar Chart</h1>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Product Sales Performance</CardTitle>\n            <CardDescription>\n              Sales vs targets with category filtering and hover effects\n            </CardDescription>\n            <div className=\"flex flex-wrap gap-2 mt-4\">\n              <Button\n                variant={selectedCategory === null ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setSelectedCategory(null)}\n              >\n                All Categories\n              </Button>\n              {categories.map((category) => (\n                <Button\n                  key={category}\n                  variant={selectedCategory === category ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category)}\n                >\n                  {category}\n                </Button>\n              ))}\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"mb-4\">\n              <Badge variant=\"secondary\">\n                Showing {filteredData.length} products\n                {selectedCategory && ` in ${selectedCategory}`}\n              </Badge>\n            </div>\n            \n            <ChartContainer config={chartConfig} className=\"h-[400px] w-full\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={filteredData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                  <XAxis \n                    dataKey=\"product\" \n                    tickLine={false}\n                    axisLine={false}\n                    className=\"text-xs\"\n                    angle={-45}\n                    textAnchor=\"end\"\n                    height={80}\n                  />\n                  <YAxis \n                    tickLine={false}\n                    axisLine={false}\n                    className=\"text-xs\"\n                  />\n                  <ChartTooltip \n                    content={<ChartTooltipContent />}\n                    cursor={{ fill: 'hsl(var(--muted) / 0.2)' }}\n                  />\n                  <ChartLegend content={<ChartLegendContent />} />\n                  <Bar \n                    dataKey=\"sales\" \n                    radius={[4, 4, 0, 0]}\n                    onMouseEnter={(data) => setHoveredBar(data.product)}\n                    onMouseLeave={() => setHoveredBar(null)}\n                  >\n                    {filteredData.map((entry) => (\n                      <Cell \n                        key={entry.product} \n                        fill={getBarColor(entry.product, 'sales')}\n                      />\n                    ))}\n                  </Bar>\n                  <Bar \n                    dataKey=\"target\" \n                    radius={[4, 4, 0, 0]}\n                    onMouseEnter={(data) => setHoveredBar(data.product)}\n                    onMouseLeave={() => setHoveredBar(null)}\n                  >\n                    {filteredData.map((entry) => (\n                      <Cell \n                        key={entry.product} \n                        fill={getBarColor(entry.product, 'target')}\n                      />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </ChartContainer>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}",
  },

  // Multi-Chart Dashboard Example
  dashboardCharts: {
    name: 'Multi-Chart Dashboard',
    description: 'Comprehensive dashboard with multiple chart types and real-time updates',
    code: 'import React from \'react\';\nimport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n} from \'./ui/chart\';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n} from \'recharts\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'./ui/card\';\nimport { Button } from \'./ui/button\';\nimport { Badge } from \'./ui/badge\';\n\nconst revenueData = [\n  { month: \'Jan\', revenue: 4000, growth: 12 },\n  { month: \'Feb\', revenue: 3000, growth: -8 },\n  { month: \'Mar\', revenue: 5000, growth: 25 },\n  { month: \'Apr\', revenue: 4500, growth: 15 },\n  { month: \'May\', revenue: 6000, growth: 33 },\n  { month: \'Jun\', revenue: 5500, growth: 22 },\n];\n\nconst categoryData = [\n  { name: \'Electronics\', value: 45, color: \'hsl(var(--chart-1))\' },\n  { name: \'Clothing\', value: 25, color: \'hsl(var(--chart-2))\' },\n  { name: \'Books\', value: 15, color: \'hsl(var(--chart-3))\' },\n  { name: \'Home\', value: 10, color: \'hsl(var(--chart-4))\' },\n  { name: \'Sports\', value: 5, color: \'hsl(var(--chart-5))\' },\n];\n\nconst performanceData = [\n  { metric: \'Conversion Rate\', current: 3.2, target: 3.5 },\n  { metric: \'Avg Order Value\', current: 85, target: 90 },\n  { metric: \'Customer Satisfaction\', current: 4.6, target: 4.5 },\n  { metric: \'Return Rate\', current: 2.1, target: 2.0 },\n];\n\nconst chartConfig = {\n  revenue: { label: \'Revenue\', color: \'hsl(var(--chart-1))\' },\n  growth: { label: \'Growth %\', color: \'hsl(var(--chart-2))\' },\n  current: { label: \'Current\', color: \'hsl(var(--chart-1))\' },\n  target: { label: \'Target\', color: \'hsl(var(--chart-2))\' },\n};\n\nexport default function DashboardCharts() {\n  const [isRealTime, setIsRealTime] = React.useState(false);\n  const [lastUpdate, setLastUpdate] = React.useState(new Date());\n\n  React.useEffect(() => {\n    if (isRealTime) {\n      const interval = setInterval(() => {\n        setLastUpdate(new Date());\n        // In a real app, you would fetch new data here\n      }, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [isRealTime]);\n\n  const totalRevenue = revenueData.reduce((sum, item) => sum + item.revenue, 0);\n  const avgGrowth = revenueData.reduce((sum, item) => sum + item.growth, 0) / revenueData.length;\n\n  return (\n    <div className="p-8">\n      <div className="max-w-7xl mx-auto">\n        <div className="flex justify-between items-center mb-6">\n          <h1 className="text-2xl font-bold">Analytics Dashboard</h1>\n          <div className="flex items-center gap-4">\n            <Badge variant="outline">\n              Last updated: {lastUpdate.toLocaleTimeString()}\n            </Badge>\n            <Button\n              variant={isRealTime ? \'default\' : \'outline\'}\n              onClick={() => setIsRealTime(!isRealTime)}\n            >\n              {isRealTime ? \'Stop\' : \'Start\'} Real-time\n            </Button>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">\n          <Card>\n            <CardHeader className="pb-2">\n              <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className="text-2xl font-bold">${totalRevenue.toLocaleString()}</div>\n              <p className="text-xs text-muted-foreground">+{avgGrowth.toFixed(1)}% from last period</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className="pb-2">\n              <CardTitle className="text-sm font-medium">Active Categories</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className="text-2xl font-bold">{categoryData.length}</div>\n              <p className="text-xs text-muted-foreground">Across all product lines</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className="pb-2">\n              <CardTitle className="text-sm font-medium">Performance Score</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className="text-2xl font-bold">87%</div>\n              <p className="text-xs text-muted-foreground">Above target threshold</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Grid */}\n        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">\n          {/* Revenue Trend */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Revenue Trend</CardTitle>\n              <CardDescription>Monthly revenue and growth percentage</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ChartContainer config={chartConfig} className="h-[300px] w-full">\n                <ResponsiveContainer width="100%" height="100%">\n                  <LineChart data={revenueData}>\n                    <XAxis dataKey="month" tickLine={false} axisLine={false} className="text-xs" />\n                    <YAxis tickLine={false} axisLine={false} className="text-xs" />\n                    <ChartTooltip content={<ChartTooltipContent />} />\n                    <Line \n                      type="monotone" \n                      dataKey="revenue" \n                      stroke={chartConfig.revenue.color}\n                      strokeWidth={3}\n                      dot={{ r: 5 }}\n                      activeDot={{ r: 7 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </ChartContainer>\n            </CardContent>\n          </Card>\n\n          {/* Category Distribution */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Sales by Category</CardTitle>\n              <CardDescription>Distribution of sales across product categories</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ChartContainer config={chartConfig} className="h-[300px] w-full">\n                <ResponsiveContainer width="100%" height="100%">\n                  <PieChart>\n                    <Pie\n                      data={categoryData}\n                      cx="50%"\n                      cy="50%"\n                      innerRadius={60}\n                      outerRadius={100}\n                      paddingAngle={5}\n                      dataKey="value"\n                    >\n                      {categoryData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <ChartTooltip \n                      content={({ active, payload }) => {\n                        if (active && payload && payload.length) {\n                          const data = payload[0].payload;\n                          return (\n                            <div className="bg-background border rounded-lg shadow-lg p-3">\n                              <p className="font-medium">{data.name}</p>\n                              <p className="text-sm text-muted-foreground">{data.value}%</p>\n                            </div>\n                          );\n                        }\n                        return null;\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </ChartContainer>\n            </CardContent>\n          </Card>\n\n          {/* Performance Metrics */}\n          <Card className="lg:col-span-2">\n            <CardHeader>\n              <CardTitle>Performance Metrics</CardTitle>\n              <CardDescription>Current performance vs targets</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ChartContainer config={chartConfig} className="h-[300px] w-full">\n                <ResponsiveContainer width="100%" height="100%">\n                  <BarChart data={performanceData} layout="horizontal">\n                    <XAxis type="number" tickLine={false} axisLine={false} className="text-xs" />\n                    <YAxis \n                      type="category" \n                      dataKey="metric" \n                      tickLine={false} \n                      axisLine={false} \n                      className="text-xs"\n                      width={120}\n                    />\n                    <ChartTooltip content={<ChartTooltipContent />} />\n                    <ChartLegend content={<ChartLegendContent />} />\n                    <Bar dataKey="current" fill={chartConfig.current.color} radius={[0, 4, 4, 0]} />\n                    <Bar dataKey="target" fill={chartConfig.target.color} radius={[0, 4, 4, 0]} />\n                  </BarChart>\n                </ResponsiveContainer>\n              </ChartContainer>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}',
  },
};
