/**
 * Command Palette Examples for LibreChat Artifacts
 *
 * This file contains comprehensive examples showcasing the enhanced command palette
 * functionality with keyboard shortcuts, search, grouping, and accessibility features.
 */

export const commandPaletteExamples = {
  // Basic Command Palette Example
  basicCommandPalette: {
    name: 'Basic Command Palette',
    description: 'Simple command palette with search and keyboard navigation',
    code: "import React from 'react';\nimport {\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n} from './ui/command';\nimport { Button } from './ui/button';\n\nexport default function BasicCommandPalette() {\n  const [open, setOpen] = React.useState(false);\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        setOpen((open) => !open);\n      }\n    };\n\n    document.addEventListener('keydown', down);\n    return () => document.removeEventListener('keydown', down);\n  }, []);\n\n  const commands = [\n    { id: 'home', label: 'Home', action: () => console.log('Navigate to Home') },\n    { id: 'about', label: 'About', action: () => console.log('Navigate to About') },\n    { id: 'contact', label: 'Contact', action: () => console.log('Navigate to Contact') },\n    { id: 'settings', label: 'Settings', action: () => console.log('Open Settings') },\n    { id: 'help', label: 'Help', action: () => console.log('Open Help') },\n  ];\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-md mx-auto\">\n        <h1 className=\"text-2xl font-bold mb-4\">Basic Command Palette</h1>\n        <p className=\"text-gray-600 mb-6\">\n          Press <kbd className=\"px-2 py-1 bg-gray-100 rounded text-sm\">⌘K</kbd> or{' '}\n          <kbd className=\"px-2 py-1 bg-gray-100 rounded text-sm\">Ctrl+K</kbd> to open\n        </p>\n        <Button onClick={() => setOpen(true)}>\n          Open Command Palette\n        </Button>\n      </div>\n\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput placeholder=\"Type a command or search...\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          <CommandGroup heading=\"Navigation\">\n            {commands.map((command) => (\n              <CommandItem\n                key={command.id}\n                onSelect={() => {\n                  command.action();\n                  setOpen(false);\n                }}\n              >\n                {command.label}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </CommandList>\n      </CommandDialog>\n    </div>\n  );\n}",
  },

  // Advanced Command Palette with Icons and Groups
  advancedCommandPalette: {
    name: 'Advanced Command Palette with Icons',
    description: 'Command palette with icons, multiple groups, and advanced search',
    code: "import React from 'react';\nimport {\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandSeparator,\n} from './ui/command';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\n\n// Mock icons - in real app, use lucide-react or similar\nconst Icon = ({ name, className = \"w-4 h-4\" }: { name: string; className?: string }) => (\n  <div className={`${className} bg-gray-300 rounded flex items-center justify-center text-xs`}>\n    {name.charAt(0).toUpperCase()}\n  </div>\n);\n\nexport default function AdvancedCommandPalette() {\n  const [open, setOpen] = React.useState(false);\n  const [pages, setPages] = React.useState<string[]>(['home']);\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        setOpen((open) => !open);\n      }\n    };\n\n    document.addEventListener('keydown', down);\n    return () => document.removeEventListener('keydown', down);\n  }, []);\n\n  const activePage = pages[pages.length - 1];\n\n  const commands = {\n    home: [\n      {\n        id: 'new-file',\n        label: 'New File',\n        icon: 'F',\n        shortcut: '⌘N',\n        action: () => console.log('New File'),\n      },\n      {\n        id: 'open-file',\n        label: 'Open File',\n        icon: 'O',\n        shortcut: '⌘O',\n        action: () => console.log('Open File'),\n      },\n      {\n        id: 'save',\n        label: 'Save',\n        icon: 'S',\n        shortcut: '⌘S',\n        action: () => console.log('Save'),\n      },\n    ],\n    navigation: [\n      {\n        id: 'dashboard',\n        label: 'Dashboard',\n        icon: 'D',\n        action: () => console.log('Navigate to Dashboard'),\n      },\n      {\n        id: 'projects',\n        label: 'Projects',\n        icon: 'P',\n        action: () => setPages([...pages, 'projects']),\n      },\n      {\n        id: 'settings',\n        label: 'Settings',\n        icon: 'S',\n        action: () => setPages([...pages, 'settings']),\n      },\n    ],\n    projects: [\n      {\n        id: 'project-1',\n        label: 'LibreChat Enhancement',\n        icon: 'L',\n        badge: 'Active',\n        action: () => console.log('Open LibreChat project'),\n      },\n      {\n        id: 'project-2',\n        label: 'UI Component Library',\n        icon: 'U',\n        badge: 'Draft',\n        action: () => console.log('Open UI project'),\n      },\n      {\n        id: 'project-3',\n        label: 'API Documentation',\n        icon: 'A',\n        badge: 'Complete',\n        action: () => console.log('Open API project'),\n      },\n    ],\n    settings: [\n      {\n        id: 'theme',\n        label: 'Change Theme',\n        icon: 'T',\n        action: () => console.log('Change theme'),\n      },\n      {\n        id: 'shortcuts',\n        label: 'Keyboard Shortcuts',\n        icon: 'K',\n        action: () => console.log('Show shortcuts'),\n      },\n      {\n        id: 'account',\n        label: 'Account Settings',\n        icon: 'A',\n        action: () => console.log('Account settings'),\n      },\n    ],\n  };\n\n  const currentCommands = commands[activePage as keyof typeof commands] || commands.home;\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-md mx-auto\">\n        <h1 className=\"text-2xl font-bold mb-4\">Advanced Command Palette</h1>\n        <p className=\"text-gray-600 mb-6\">\n          Features icons, groups, shortcuts, and nested navigation\n        </p>\n        <Button onClick={() => setOpen(true)}>\n          Open Command Palette\n        </Button>\n      </div>\n\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput placeholder=\"Type a command or search...\" />\n        <CommandList>\n          <CommandEmpty>No results found.</CommandEmpty>\n          \n          {activePage !== 'home' && (\n            <>\n              <CommandGroup>\n                <CommandItem\n                  onSelect={() => {\n                    setPages(pages.slice(0, -1));\n                  }}\n                >\n                  <Icon name=\"←\" className=\"mr-2 w-4 h-4\" />\n                  Back\n                </CommandItem>\n              </CommandGroup>\n              <CommandSeparator />\n            </>\n          )}\n\n          <CommandGroup heading={activePage === 'home' ? 'File' : activePage.charAt(0).toUpperCase() + activePage.slice(1)}>\n            {currentCommands.map((command) => (\n              <CommandItem\n                key={command.id}\n                onSelect={() => {\n                  command.action();\n                  if (!command.action.toString().includes('setPages')) {\n                    setOpen(false);\n                  }\n                }}\n              >\n                <Icon name={command.icon} className=\"mr-2 w-4 h-4\" />\n                <span className=\"flex-1\">{command.label}</span>\n                {command.badge && (\n                  <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n                    {command.badge}\n                  </Badge>\n                )}\n                {command.shortcut && (\n                  <kbd className=\"ml-2 px-2 py-1 bg-gray-100 rounded text-xs\">\n                    {command.shortcut}\n                  </kbd>\n                )}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n\n          {activePage === 'home' && (\n            <>\n              <CommandSeparator />\n              <CommandGroup heading=\"Navigation\">\n                {commands.navigation.map((command) => (\n                  <CommandItem\n                    key={command.id}\n                    onSelect={() => {\n                      command.action();\n                      if (!command.action.toString().includes('setPages')) {\n                        setOpen(false);\n                      }\n                    }}\n                  >\n                    <Icon name={command.icon} className=\"mr-2 w-4 h-4\" />\n                    {command.label}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </>\n          )}\n        </CommandList>\n      </CommandDialog>\n    </div>\n  );\n}",
  },

  // Search-Focused Command Palette
  searchCommandPalette: {
    name: 'Search-Focused Command Palette',
    description: 'Command palette optimized for search with recent commands and suggestions',
    code: "import React from 'react';\nimport {\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n} from './ui/command';\nimport { Button } from './ui/button';\n\n// Mock icons\nconst Icon = ({ name, className = \"w-4 h-4\" }: { name: string; className?: string }) => (\n  <div className={`${className} bg-gray-300 rounded flex items-center justify-center text-xs`}>\n    {name.charAt(0).toUpperCase()}\n  </div>\n);\n\nexport default function SearchCommandPalette() {\n  const [open, setOpen] = React.useState(false);\n  const [searchValue, setSearchValue] = React.useState('');\n  const [recentCommands, setRecentCommands] = React.useState<string[]>([\n    'dashboard',\n    'new-project',\n    'settings'\n  ]);\n\n  React.useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        setOpen((open) => !open);\n      }\n    };\n\n    document.addEventListener('keydown', down);\n    return () => document.removeEventListener('keydown', down);\n  }, []);\n\n  const allCommands = [\n    { id: 'dashboard', label: 'Dashboard', icon: 'D', category: 'Navigation' },\n    { id: 'projects', label: 'Projects', icon: 'P', category: 'Navigation' },\n    { id: 'tasks', label: 'Tasks', icon: 'T', category: 'Navigation' },\n    { id: 'calendar', label: 'Calendar', icon: 'C', category: 'Navigation' },\n    { id: 'new-project', label: 'New Project', icon: 'N', category: 'Actions' },\n    { id: 'new-task', label: 'New Task', icon: 'T', category: 'Actions' },\n    { id: 'export-data', label: 'Export Data', icon: 'E', category: 'Actions' },\n    { id: 'import-data', label: 'Import Data', icon: 'I', category: 'Actions' },\n    { id: 'settings', label: 'Settings', icon: 'S', category: 'System' },\n    { id: 'help', label: 'Help & Support', icon: 'H', category: 'System' },\n    { id: 'shortcuts', label: 'Keyboard Shortcuts', icon: 'K', category: 'System' },\n    { id: 'logout', label: 'Logout', icon: 'L', category: 'System' },\n  ];\n\n  const executeCommand = (commandId: string) => {\n    console.log(`Executing command: ${commandId}`);\n    \n    // Add to recent commands\n    const newRecent = [commandId, ...recentCommands.filter(id => id !== commandId)].slice(0, 5);\n    setRecentCommands(newRecent);\n    \n    setOpen(false);\n  };\n\n  const filteredCommands = allCommands.filter(command =>\n    command.label.toLowerCase().includes(searchValue.toLowerCase()) ||\n    command.category.toLowerCase().includes(searchValue.toLowerCase())\n  );\n\n  const recentCommandsData = recentCommands\n    .map(id => allCommands.find(cmd => cmd.id === id))\n    .filter(Boolean) as typeof allCommands;\n\n  const groupedCommands = filteredCommands.reduce((acc, command) => {\n    if (!acc[command.category]) {\n      acc[command.category] = [];\n    }\n    acc[command.category].push(command);\n    return acc;\n  }, {} as Record<string, typeof allCommands>);\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-md mx-auto\">\n        <h1 className=\"text-2xl font-bold mb-4\">Search Command Palette</h1>\n        <p className=\"text-gray-600 mb-6\">\n          Advanced search with recent commands and smart suggestions\n        </p>\n        <Button onClick={() => setOpen(true)}>\n          Open Search Palette\n        </Button>\n        \n        {recentCommands.length > 0 && (\n          <div className=\"mt-6\">\n            <h3 className=\"text-sm font-medium text-gray-700 mb-2\">Recent Commands:</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {recentCommandsData.map((command) => (\n                <button\n                  key={command.id}\n                  onClick={() => executeCommand(command.id)}\n                  className=\"px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-full text-sm transition-colors\"\n                >\n                  {command.label}\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput \n          placeholder=\"Search commands, actions, or navigate...\" \n          value={searchValue}\n          onValueChange={setSearchValue}\n        />\n        <CommandList>\n          <CommandEmpty>\n            <div className=\"text-center py-6\">\n              <p className=\"text-gray-500 mb-2\">No commands found</p>\n              <p className=\"text-sm text-gray-400\">\n                Try searching for \"dashboard\", \"new\", or \"settings\"\n              </p>\n            </div>\n          </CommandEmpty>\n          \n          {!searchValue && recentCommandsData.length > 0 && (\n            <CommandGroup heading=\"Recent\">\n              {recentCommandsData.map((command) => (\n                <CommandItem\n                  key={`recent-${command.id}`}\n                  onSelect={() => executeCommand(command.id)}\n                >\n                  <Icon name={command.icon} className=\"mr-2 w-4 h-4\" />\n                  <span className=\"flex-1\">{command.label}</span>\n                  <span className=\"text-xs text-gray-400\">Recent</span>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          )}\n\n          {Object.entries(groupedCommands).map(([category, commands]) => (\n            <CommandGroup key={category} heading={category}>\n              {commands.map((command) => (\n                <CommandItem\n                  key={command.id}\n                  onSelect={() => executeCommand(command.id)}\n                >\n                  <Icon name={command.icon} className=\"mr-2 w-4 h-4\" />\n                  <span className=\"flex-1\">{command.label}</span>\n                  {searchValue && (\n                    <span className=\"text-xs text-gray-400\">{category}</span>\n                  )}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          ))}\n        </CommandList>\n      </CommandDialog>\n    </div>\n  );\n}",
  },
};
